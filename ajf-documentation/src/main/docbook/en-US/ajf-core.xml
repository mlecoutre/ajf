<?xml version='1.0' encoding='ISO-8859-1'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
<chapter id="core">
	<title>AJF - Core Reference</title>
	<para>
		The AJF Core library provide a set of commons reusable components for use
		on J2EE server and other Servlet containers. 		
	</para>
	<example>
			<title>Reference "ajf-core" in your Maven 2 project configuration file 'pom.xml'</title>
			<programlisting language="Xml" role="Xml"><![CDATA[
	<dependency>
		<groupId>am.ajf</groupId>
		<artifactId>ajf-core</artifactId>
		<version>${ajf.version}</version>
	</dependency>
			]]></programlisting>
	</example>
	<section id="applicationContextSection">
		<title>ApplicationContext</title>
		<para>
			The <classname>ApplicationContext</classname> is a component which is responsible of the application configuration.
			The application configuration is a set of 'properties/values' pair and is stored in the 'settings.properties' file.
			Some specifics properties are directly accessible attributes from <classname>ApplicationContext</classname> : 
			<itemizedlist>
					<listitem>application.name</listitem>
					<listitem>log.dir</listitem>
					<listitem>working.dir</listitem>
			</itemizedlist>
		</para>
		<para>
		The others application attributes are available as <link linkend="configurationSection"><classname>Configuration</classname></link> object 
		from <parameter>ApplicationContext.getConfiguration()</parameter>.
		</para>
		<example>
			<title>Configuration file : 'settings.properties'</title>
			<programlisting><![CDATA[	
	application.name=TestApplication
	working.dir=
	myKey=myValue	
			]]></programlisting>
		</example>
		<programlisting language="Java" role="Java"><![CDATA[
	// Get the logging directory
	File logDir = ApplicationContext.getLogDir();
	// Get the working directory
	File workingDir = ApplicationContext.getWorkingDir();
	// Get the application name
	String appName = ApplicationContext.getApplicationName();

	// get a specific attribute value (as String)
	String value = ApplicationContext.getConfiguration().getString("myKey");	
		]]></programlisting>
	</section>
	<section id="configurationSection">
		<title>Configuration</title>
		<para>
			The configuration component is provided by the project <ulink url="http://commons.apache.org/configuration">commons-configuration</ulink> 
			from the Apache Foundation. 
			<itemizedlist>
				<listitem>commons-configuration documentation is available <ulink url="http://commons.apache.org/configuration/userguide/user_guide.html">here</ulink>.</listitem>
			</itemizedlist>
		</para>
		<section>
			<title>Create Configuration objects</title>
			<para>
				You can create configuration objects from the following sources :
				<itemizedlist>
					<listitem>Properties files</listitem>
					<listitem>XML documents</listitem>
					<listitem>INI files</listitem>
					<listitem>System properties</listitem>
					<listitem>JNDI entries</listitem>
				</itemizedlist>
			</para>
			<para>				
				The configuration objects could be obtained by the <classname>ConfigurationHelper</classname> class.
					<table frame="all">
		   			  <title>ConfigurationHelper API</title>
		   			  <tgroup cols="2">
				        <colspec colname="c1"/>
				        <colspec colname="c2"/>
				         <thead>
				              <row>
				                <entry colname="1">Method</entry>
				                <entry colname="2">Description</entry>
				              </row>
			            </thead>
				        <tbody>
				        	<row>
				        		<entry>newConfigurationFromPropertiesFile(String filePath)</entry>
				        		<entry>create a Configuration object initialized with the properties file entries</entry>
				        	</row>
				        	<row>
				        		<entry>newConfigurationFromPropertiesResource(String resourceName)</entry>
				        		<entry>create a Configuration object initialized with the properties resource entries</entry>
				        	</row>
				        	<row>
				        		<entry>newConfigurationFromIniFile(String filePath)</entry>
				        		<entry>create a Configuration object initialized with the Ini file entries</entry>
				        	</row>
				        	<row>
				        		<entry>newConfigurationFromIniResource(String resourceName)</entry>
				        		<entry>create a Configuration object initialized with the Ini resource entries</entry>
				        	</row>
				        	<row>
				        		<entry>newConfigurationFromXMLFile(String filePath)</entry>
				        		<entry>create a Configuration object initialized with the XML file entries</entry>
				        	</row>
				        	<row>
				        		<entry>newConfigurationFromXMLResource(String resourceName)</entry>
				        		<entry>create a Configuration object initialized with the XML resource entries</entry>
				        	</row>
				        </tbody>
				      </tgroup>
				    </table>
			</para>
			<programlisting language="Java" role="Java"><![CDATA[
		// create th new Configuration object from resource 'settings.properties'
		Configuration config = ConfigurationHelper.
			newConfigurationFromPropertiesResource("settings.properties");
		// get 'myFirstKey' property as String
		config.getString("myFirstKey")
			 ]]></programlisting>
			<para>
					Others methods than <parameter>getString(String key)</parameter> are available, see the javaDoc 
					<ulink url="http://commons.apache.org/configuration/apidocs/org/apache/commons/configuration/Configuration.html">here</ulink>.
			</para>
		</section>
		<section>
			<title>Bean Configuration objects</title>
			<para>
			The <classname>BeanConfiguration</classname> object allow to work with <parameter>Bean</parameter> objects and resolve 'nested' like properties. 
			</para>
			<programlisting language="Java" role="Java"><![CDATA[
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("name", "value");

		List<String> list = new ArrayList<String>();
		list.add("x");
		list.add("y");
		list.add("z");
		map.put("d", list);

		BeanConfiguration bConfig = new BeanConfiguration();
		bConfig.addProperty("aMap", map);

		logger.info(bConfig.getString("aMap.[name]"));
		logger.info(bConfig.getString("aMap.[c]"));
		logger.info(bConfig.getString("aMap.[d](0)"));
			]]></programlisting>
		</section>
		<section>
			<title>Merge Configuration objects</title>
			<para>
			Merging <classname>Configuration</classname> objects allow to chain them and resolve properties in a merged Configuration context. 
			</para>
			<programlisting language="Java" role="Java"><![CDATA[
		// create th new Configuration object from resource 'settings.properties'
		PropertiesConfiguration sConfig = new PropertiesConfiguration();
		sConfig.addProperty("c", "${b}");
		
		PropertiesConfiguration pConfig = new PropertiesConfiguration();
		pConfig.addProperty("b", "${a}_26");
		pConfig.addProperty("a", "25");
		
		// merge (chain) the configurations objects
		Configuration config = ConfigurationHelper.
			mergeConfigurations(sConfig, pConfig);
		
		// get 'c' property as String
		config.getString("c");
		// << must return 25_26
			]]></programlisting>
		</section>
		<section>
			<title>Prefixed Variables Interpolation</title>
			<para>
			You can reference differents kind of variables in your configuration : 
				<itemizedlist>
					<listitem>Java System variables as 'env:'</listitem>
					<listitem>OS Envir variables as 'env:'</listitem>
					<listitem>Java Constantes as 'const:'</listitem>
				</itemizedlist>
			</para>
			<programlisting language="Java" role="Java"><![CDATA[
			Configuration configuration = new PropertiesConfiguration();

		// resolve a System java variable
		String res = (String) ConfigurationUtils.evaluate("${sys:java.home}",
				configuration);
		logger.info(res);

		// resolve an OS Envir variable
		res = (String) ConfigurationUtils.evaluate("${env:JAVA_HOME}",
				configuration);
		logger.info(res);

		// resolve a Java constante
		res = (String) ConfigurationUtils.evaluate(
				"${const:myPackage.MyClass.A_JAVA_CONSTANTE}", configuration);
		logger.info(res);
		]]></programlisting>
		</section>
		<section>
			<title>Expressions Evaluation</title>
			<para>
			You can evaluate 'EL' like expressions in a <classname>Configuration</classname> context.
			</para>
			<programlisting language="Java" role="Java"><![CDATA[
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("name", "value");

		List<String> list = new ArrayList<String>();
		list.add("x");
		list.add("y");
		list.add("z");
		map.put("d", list);

		BeanConfiguration bConfig = new BeanConfiguration();
		bConfig.addProperty("aMap", map);

		logger.info(""
				+ ConfigurationUtils.evaluate("the value is : ${aMap.[name]}",
						bConfig));
			]]></programlisting>
		</section>
	</section>
	<section id="auditDatasSection">
		<title>AuditDatas</title>
		<para>The <classname>AuditData</classname> object is a valu object which contain some user context informations like :		
			<itemizedlist>
				<listitem>the user identifier</listitem>
				<listitem>the user transaction UUID</listitem>
				<listitem>the user transaction Date</listitem>
				<listitem>... </listitem>
			</itemizedlist>	
			<important>
				<para>'user transaction' is not in the JTA meaning but in the user requets meaning.</para>
			</important>
			Normally the <classname>AuditData</classname> object is initialized automatically for the web modules 
			with a specific <classname>ServletFilter</classname>, but you can initialize it by yourself.
		</para>
		<section>
			<title>Initialize AuditDatas</title>
			<para>		
			</para>
			<programlisting language="Java" role="Java"><![CDATA[
		EditableAuditData data = (EditableAuditData) AuditDataContext.initContextData();
		// set the user Id
		data.put(AuditData.KEY_USERID, "u002617");
		// user transaction UUID and Date are automatically initialized
			]]></programlisting>
			<para><classname>String</classname> typed audit datas are automatically propagated in the <classname>Logger</classname> user context
				and available in the logging message pattern as eXtended properties
			</para>
			<example>
				<title>Using AuditDatas in a logger message pattern - from file 'logback.xml'</title>
				<programlisting language="Xml" role="Xml"><![CDATA[
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<target>System.out</target>
		<encoder>
			<pattern>
				[%thread] %-5level %X{uuid} %X{userid} %logger{36} - %msg%n
			</pattern>
		</encoder>
	</appender>	
				]]></programlisting>
			</example> 
		</section>
		<section>
			<title>Access AuditDatas</title>
			<para>		
			</para>
			<programlisting language="Java" role="Java"><![CDATA[
		AuditData auditData = AuditDataContext.getAuditData();
		// get the user transaction UUID	
		String uuid = data.getString(AuditData.KEY_UUID);
		// get the user transaction Date
		Date date = (Date) data.get(AuditData.KEY_DATE);
		// get the user identifier
		String userId = data.getString(AuditData.KEY_USERID);
			]]></programlisting>
		</section>
		<section>
			<title>Auditor</title>
			<para>		
				The <classname>Auditor</classname> component allow to trace application audit informations like :
				<itemizedlist>
					<listitem>who log in</listitem>
					<listitem>the invoked action as [Function].[UnitTask]</listitem>
					<listitem>the requested [Resource]</listitem>
					<listitem>who log out</listitem>
					<listitem>... </listitem>
				</itemizedlist>
				The audit informations are logged with the 'audit' logger as 'TRACE' level.  
				<table frame="all">
	   			  <title>Auditor API</title>
	   			  <tgroup cols="2">
			        <colspec colname="c1"/>
			        <colspec colname="c2"/>
			         <thead>
			              <row>
			                <entry colname="1">Method</entry>
			                <entry colname="2">Description</entry>
			              </row>
		            </thead>
			        <tbody>
			        	<row>
			        		<entry>audit(String message)</entry>
			        		<entry>log the message in 'audit' logger as 'TRACE' level</entry>
			        	</row>
			        	<row>
			        		<entry>audit(String messageFormat, Object.. args)</entry>
			        		<entry>log the message (=<ulink url="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/String.html#format(java.lang.String, java.lang.Object...)">String.format(messageFormat, args)</ulink>) in 'audit' logger as 'TRACE' level</entry>
			        	</row>
			        </tbody>
			      </tgroup>
			    </table>
			</para>
			<programlisting language="Java" role="Java"><![CDATA[
		import static am.ajf.core.datas.Auditor.audit;
		import am.ajf.core.datas.Auditor;
		
		...
		audit("try to get resource: %s", "mySecuriedResource");
		// or
		Auditor.audit("try to get resource: %s", "mySecurizedResource");
		
			]]></programlisting>
		</section>
	</section>
	<section id="loggingSection">
		<title>Logging</title>
		<para>
			The logging facade is provided by the project <ulink url="http://www.slf4j.org/">SLF4J</ulink> and the logging implementation is
			provided by the project <ulink url="http://logback.qos.ch/">LOGBack</ulink>. 
			<itemizedlist>
				<listitem>SLF4J documentation is available <ulink url="http://www.slf4j.org/manual.html">here</ulink>.</listitem>
				<listitem>LOGBack documentation is available <ulink url="http://logback.qos.ch/manual/index.html">here</ulink>.</listitem>
			</itemizedlist>
		</para>
		<section>
			<title>Others Logging Frameworks Forwards</title>
			<para>
				You can include some specifics dependencies in you Maven 2 project configuration file, in order to forward others logging frameworks logs.
				<itemizedlist>
					<listitem>redirect log4j logs</listitem>
					<listitem>redirect java commons logging logs</listitem>
					<listitem>redirect java util logging logs</listitem>
				</itemizedlist>
			</para>
			<programlisting language="Java" role="Java"><![CDATA[
		<!-- loggers adapters -->
		
		<!-- redirect log4j logs : already done in ajf-core -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>log4j-over-slf4j</artifactId>
			<version>${slf4j.version}</version>
		</dependency>

		<!-- redirect java commons logging logs : already done in ajf-core -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>${slf4j.version}</version>
		</dependency>

		<!-- redirect java util logging logs -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jul-to-slf4j</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
			]]></programlisting>
		</section>
		<section>
			<title>Import starter configuration files</title>
			<para>
				You will likely want to start with a base configuration file that you can build upon.
				In Maven you can have a logging configuration for your main source and another for your testing. 
				Default configuration files can be found in the package "logger" of  "ajf-core" archive.
				You only have to copy them in you project to the appropriate directory.
			</para>
			<programlisting>
			<![CDATA[
			src
				main
					resources
						logback.xml (copied from ajf-core/logger/logback.xml)
				test
					resources
						logback-test.xml (copied from ajf-core/logger/logback-test.xml)
			]]></programlisting>
			<section>
				<title>Standard configuration</title>
				<para>
				<parameter>Standard configuration</parameter> com with a set of included appenders 
				(declared in the file "logger/includes/logback-ajf.xml").
				This appenders are : 
				<itemizedlist>
					<listitem>STDOUT : appender on the "System.out" output</listitem>
					<listitem>STDERR : appender on the "System.err" output</listitem>
					<listitem>AUDIT_FILE : a daily rolling file - max : 10 files - for "audit" logs</listitem>
					<listitem>TROUBLESHOOTING_FILE : a rolling file - max : 10 files of 10 Mbytes - for WARN logs</listitem>
					<listitem>AJF_FILE : a daily rolling file - max : 10 files - for ajf logs</listitem>
					<listitem>APP_FILE : a daily rolling file - max : 10 files - for applicative logs</listitem>
				</itemizedlist>
				</para>
				<programlisting language="Xml" role="Xml"><![CDATA[
			<?xml version="1.0" encoding="UTF-8"?>
			<configuration>
			
				<include resource="logger/includes/logback-ajf.xml"/>
				
				<root level="WARN">
					<appender-ref ref="APP_FILE" />
					<appender-ref ref="TROUBLESHOOTING_FILE" />
				</root>
				
				<logger name="audit" level="TRACE" additivity="false">
					<appender-ref ref="AUDIT_FILE" />
				</logger>
				
				<!-- can be level="TRACE" -->
				<logger name="am.ajf" level="WARN" additivity="false">
					<appender-ref ref="AJF_FILE" />
				</logger>			
				
				<!-- where "youAppBasePackageName" is you applicative base package name -->
				<!-- 
				<logger name="youAppBasePackageName" level="INFO" additivity="false">
					<appender-ref ref="APP_FILE" />
					<appender-ref ref="TROUBLESHOOTING_FILE" />
				</logger>
				-->
					
			</configuration>
				]]></programlisting>
			</section>
			<section>
				<title>Test</title>
				<para>
				<parameter>Test configuration</parameter> com with a set of included appenders 
				(declared in the file "logger/includes/logback-ajf-test.xml").
				This appenders are : 
				<itemizedlist>
					<listitem>STDOUT : appender on the "System.out" output</listitem>
					<listitem>STDERR : appender on the "System.err" output</listitem>
				</itemizedlist>
				</para>
				<programlisting language="Xml" role="Xml"><![CDATA[
			<?xml version="1.0" encoding="UTF-8"?>
			<configuration>
			
				<include resource="logger/includes/logback-ajf-test.xml"/>
				
				<root level="WARN">
					<appender-ref ref="STDOUT" />
				</root>
				
				<logger name="audit" level="TRACE" additivity="false">
					<appender-ref ref="STDERR" />
				</logger>
				
				<!-- can be level="TRACE" -->
				<logger name="am.ajf" level="INFO" additivity="false">
					<appender-ref ref="STDERR" />
				</logger>	
					
				<!-- where "youAppBasePackageName" is you applicative base package name -->	
				<!-- 
				<logger name="youAppBasePackageName" level="DEBUG" additivity="false">
					<appender-ref ref="STDOUT" />
				</logger>
				-->
					
			</configuration>
				]]></programlisting>
			</section>
		</section>
		<section>
			<title>Customize configuration file</title>
			<para>
			The configuration principle is similar to "log4j" configuration file, but expressed as XML file.
			The logback configuration documentation is available <ulink url="http://logback.qos.ch/manual/joran.html">here</ulink>.
			</para>
			<section>
				<title>logback Appenders</title>
				<para>
					<parameter>logback</parameter> logging implementation come with a set of appenders.
					The logback appenders documentation is available <ulink url="http://logback.qos.ch/manual/appenders.html">here</ulink>.
				</para>
			</section>
		</section>
		<section>
			<title>Implement logging code</title>
			<para>
				Add the following to the import section of your java code
			</para>
			<programlisting language="Java" role="Java"><![CDATA[
		import  org.slf4j.Logger;
		import am.ajf.core.logger.LoggerFactory;
			]]></programlisting>
			<para>
			Add the following at the top of your class in the global section 
			(just under the line that declares your class public class Whatever extends Whatever). 
			Change the name of the class (MyClassName) in the getLogger method call, of course. 
			Name it the same as the class you're dropping this code into.
			</para>
			<programlisting language="Java" role="Java"><![CDATA[
		Logger LOG = LoggerFactory.getLogger(MyClassName.class);
		// or
		Logger LOG = LoggerFactory.getLogger("a custom logging category");
			]]></programlisting>
			<para>
			Add some logging statements in your code somewhere 
			where you know they'll be fired right away when you run your app.
			</para>
			<programlisting language="Java" role="Java"><![CDATA[
		LOG.trace("Hello World!");
		LOG.debug("How are you today?");
		LOG.info("I am fine.");
		LOG.warn("I love programming.");
		LOG.error("I am programming.");
		// log parameterized message
		LOG.info("I love {}.", "programming.");
			]]></programlisting>
		</section>
	</section>
	
	<section id="cacheSection">
		<title>Cache</title>
		<para>
		The <classname>Cache</classname> component provide an extensible cache manager system.  
		</para>
		<figure id="cache-classdiagram.fig">
      	  <title>Cache Class Diagram</title>
	      <mediaobject>
	        <imageobject>
	          <imagedata align="center" fileref="images/cache-classdiagram.png" scalefit="1" />
	        </imageobject>
	      </mediaobject>
	    </figure>
	    <section>
			<title>CacheManagerFactory component</title>
			<para>
				<classname>CacheManagerFactory</classname> is the entry point for accessing <classname>CacheManager</classname> component.
			</para>
			<table frame="all">
				<title>CaheManagerFactory API</title>
				<tgroup cols="3">
					<colspec colname="c1"/>
					<colspec colname="c2"/>
					<colspec colname="c3"/>
					<thead>
						<row>
							<entry colname="1">Accessor</entry>
							<entry colname="2">Method</entry>
						    <entry colname="3">Description</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>static</entry>
							<entry>CacheManager getFirstCacheManager()</entry>
						    <entry>Return the first CacheManager entry</entry>
						</row>
						<row>
							<entry>static</entry>
							<entry>CacheManager getCacheManager(String cacheManagerName)</entry>
						    <entry>Return a specific instance of CacheManager</entry>
						</row>
						<row>
							<entry>static</entry>
							<entry><![CDATA[Set<String> getCacheManagerNames()]]></entry>
						    <entry>Return a set of CacheManager names</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</section>
		<section>
			<title>CacheManager component</title>
			<para>
				<classname>CacheManager</classname> is the entry point for accessing <classname>Cache</classname> instances.	
			</para>
			<table frame="all">
				<title>CaheManager API</title>
				<tgroup cols="2">
					<colspec colname="c1"/>
					<colspec colname="c2"/>
					<thead>
						<row>
							<entry colname="1">Method</entry>
						    <entry colname="2">Description</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>String getName()</entry>
						    <entry>Return the CacheManager name</entry>
						</row>
						<row>
							<entry>Cache getCache()</entry>
						    <entry>Return the default Cache instance</entry>
						</row>
						<row>
							<entry>Cache getCache(String cacheName)</entry>
						    <entry>Return a nammed Cache instance</entry>
						</row>
						<row>
							<entry>Cache getCache(String cacheName, long ttlInMs)</entry>
						    <entry>Return a nammed TTL (Time To Live) Cache</entry>
						</row>
						<row>
							<entry>void removeCache(String cacheName)</entry>
						    <entry>Remove a specific Cache instance</entry>
						</row>
						<row>
							<entry><![CDATA[Set<String> cacheNames()]]></entry>
						    <entry>Return a set of Cache names</entry>
						</row>
						<row>
							<entry>void clearAll()</entry>
						    <entry>Clear all the Cache instances</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</section>
		<section>
			<title>Cache component</title>
			<para>
				<classname>Cache</classname> is the main component for caching operations.
			</para>
			<table frame="all">
				<title>Cahe API</title>
				<tgroup cols="2">
					<colspec colname="c1"/>
					<colspec colname="c2"/>
					<thead>
						<row>
							<entry colname="1">Method</entry>
						    <entry colname="2">Description</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>String getName()</entry>
						    <entry>Return the Cache name</entry>
						</row>
						<row>
							<entry>boolean exist(Object key)</entry>
						    <entry>Return true if the entry can be found in the Cache</entry>
						</row>
						<row>
							<entry>Object get(Object key)</entry>
						    <entry>Return a Cached object</entry>
						</row>
						<row>
							<entry>void put(Object key, Object value)</entry>
						    <entry>Add a new entry in the Cache</entry>
						</row>
						<row>
							<entry><![CDATA[Set<Object> keys()]]></entry>
						    <entry>Return a set of entries</entry>
						</row>
						<row>
							<entry>Object remove(Object key)</entry>
						    <entry>Remove a specific entry from the Cache</entry>
						</row>
						<row>
							<entry>void clear()</entry>
						    <entry>Clear all the Cache entries</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</section>
	    <section>
	    	<title>Cache Principle</title>
	    	<para>
	    		The <classname>CacheManagerFactory</classname> allow to access a <classname>CacheManager</classname> instance (nammed or first) in a static way.
	    		Then you can access a <classname>Cache</classname> instance (nammed or default one).
	    	</para>
			<programlisting language="Java" role="Java"><![CDATA[
	// for a specific CacheManager instance
	CacheManager guavaCacheManager = CacheManagerFactory.getCacheManager("guava");
	// get a nammed Cache instance
	Cache nammedCache = CacheManagerFactory.getFirstCacheManager().getCache("myCache");
	// get a time to live Cache instance
	Cache ttlCache = CacheManagerFactory.getFirstCacheManager().getCache("ttlCache", 2000); // ttl is in milli-seconds
	// get the default Cache instance
	Cache cache = CacheManagerFactory.getFirstCacheManager().getCache(); 

	// get the default Cache instance
	Cache cache = CacheManagerFactory.getFirstCacheManager().getCache();
		
	// put a new object in Cache
	cache.put("myKey", "myValue"); 
	// retrieve a cached object
	String cachedValue = (String) cache.get(key);
			]]></programlisting>
	    </section>
	    <section>
			<title>Available CacheManager implementations</title>
			<section>
				<title>'ehcache' as am.ajf.core.cache.impl.EHCacheCacheManagerImpl</title>
				<para>
				Provide caching functionalities with EHCache implementation
				</para>
			</section>
			<section>
				<title>'infinispan' as am.ajf.core.cache.impl.InfinispanEmbeddedCacheManagerImpl</title>
				<para>
				Provide caching functionalities with Infinispan implementation
				</para>
			</section>
			<section>
				<title>'guava' as am.ajf.core.cache.impl.GuavaCacheManagerImpl</title>
				<para>
				Provide caching functionalities with Google Guava implementation
				</para>
			</section>
			<section>
				<title>'simple' as am.ajf.core.cache.impl.SimpleCacheManagerImpl</title>
				<para>
				Provide caching functionalities with ConcurrentHashMap implementation
				</para>
			</section>
			<section>
				<title>'threadlocal' as am.ajf.core.cache.impl.ThreadLocalCacheManagerImpl</title>
				<para>
				Provide caching functionalities with Threadlocal ConcurrentHashMap implementation
				</para>
			</section>
		</section>
	</section>
	<section id="mailSenderSection">
		<title>MailSender</title>
		<para>
		The <classname>MailSender</classname> component allow to send messages by e-mail with attached files.
		</para>
		<table frame="all">
  			  <title>MailSender API</title>
  			  <tgroup cols="2">
	        <colspec colname="c1" />
	        <colspec colname="c2" />
	         <thead>
	              <row>
	                <entry colname="1">Method</entry>
	                <entry colname="2">Description</entry>
	              </row>
            </thead>
	        <tbody>
	        	<row>
	        		<entry>send(MailBean eMail)</entry>
	        		<entry>send e-mail defined by the <classname>MailBean</classname> parameter</entry>
	        	</row>
	        </tbody>
	      </tgroup>
	    </table>
	    <section>
	    	<title>MailBean Content</title>
	    	<table frame="all">
	  			  <title>MailBean Content</title>
	  			  <tgroup cols="3">
		        <colspec colname="c1" />
		        <colspec colname="c2" />
		        <colspec colname="c3" />
		        <thead>
		              <row>
		                <entry colname="1">Attribute</entry>
		                <entry colname="2">Required</entry>
		                <entry colname="3">Description</entry>
		              </row>
	            </thead>
		        <tbody>
		        	<row>
		        		<entry>sender</entry>
		        		<entry><emphasis>true</emphasis></entry>
		        		<entry>the e-mail sender</entry>
		        	</row>
		        	<row>
		        		<entry>to</entry>
		        		<entry><emphasis>true</emphasis></entry>
		        		<entry>the e-mail receivers with comma separator</entry>
		        	</row>
		        	<row>
		        		<entry>cc</entry>
		        		<entry>false</entry>
		        		<entry>the e-mail copy receivers with comma separator</entry>
		        	</row>
		        	<row>
		        		<entry>bcc</entry>
		        		<entry>false</entry>
		        		<entry>the e-mail hidden copy receivers with comma separator</entry>
		        	</row>
		        	<row>
		        		<entry>subjet</entry>
		        		<entry><emphasis>true</emphasis></entry>
		        		<entry>the e-mail subject</entry>
		        	</row>
		        	<row>
		        		<entry>body</entry>
		        		<entry><emphasis>true</emphasis></entry>
		        		<entry>the e-mail body, can be HTML formatted</entry>
		        	</row>
		        	<row>
		        		<entry>attachedFiles</entry>
		        		<entry>false</entry>
		        		<entry>the attached files</entry>
		        	</row>
		        </tbody>
		      </tgroup>
		    </table>  
		</section>
	    <section>
	    	<title>Default MailSender Implementation</title>
	    	<para>
	    		The default MailSender implementation is the class <classname>am.ajf.core.mail.impl.SimpleMailSenderImpl</classname>.
	    	</para>
	    	<table frame="all">
   			  <title>API</title>
   			  <tgroup cols="2">
		         <colspec colname="c1" />
		         <colspec colname="c2" />
		         <thead>
		              <row>
		                <entry colname="1">Method</entry>
		                <entry colname="2">Description</entry>
		              </row>
	            </thead>
		        <tbody>
		        	<row>
		        		<entry>setJndiName(String jndiName)</entry>
		        		<entry>set the mail session service jndi name</entry>
		        	</row>
		        	<row>
		        		<entry>setSmtpServer(String smtpServer)</entry>
		        		<entry>set the SMTP server address</entry>
		        	</row>
		        	<row>
		        		<entry>setConnectionTimeout(long connectionTimeoutInMS)</entry>
		        		<entry>set the server connection timeout</entry>
		        	</row>
		        	<row>
		        		<entry>setTimeout(long ioTimeoutInMS)</entry>
		        		<entry>set the I/O timeout</entry>
		        	</row>
		        	<row>
		        		<entry>setMaxAttachedFiles(int maxAttachedFiles)</entry>
		        		<entry>set the maximum number of attached files</entry>
		        	</row>
		        	<row>
		        		<entry>setAttachedFileMaxSize(int attachedFileMaxSize)</entry>
		        		<entry>set the maximum size for one attached file</entry>
		        	</row>
		        	<row>
		        		<entry>setUploadTempFileDirectory(String relativeTempDir)</entry>
		        		<entry>set the attached file temporary directory</entry>
		        	</row>		        			        			        	
		        </tbody>
		      </tgroup>
		    </table>
	    	<programlisting language="Java" role="Java"><![CDATA[
		MailBean mailBean = new MailBean(subject);
		mailBean.setSender("appli.my-sample-app@arcelormittal.com");
		mailBean.setTo("laurent.dupont@arcelormittal.com");
		mailBean.setBody("Hello");
	
		DefaultMailSenderImpl mailSender = new DefaultMailSenderImpl();
								 
		// additionnal properties could be initialized here
		// entire properties list is available here : 
		// http://javamail.kenai.com/nonav/javadocs/com/sun/mail/smtp/package-summary.html
		
		// send the e-mail
		mailSender.send(mailBean);			
			]]></programlisting>
	    </section>
	</section>
</chapter>
