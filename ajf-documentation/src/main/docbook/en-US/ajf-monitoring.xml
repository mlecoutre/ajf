<?xml version='1.0' encoding='ISO-8859-1'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
<chapter id="monitoring">
	<title>AJF - Monitoring Reference</title>
	<para>
		The AJF Monitoring library provide object model and components for creating and sending application events
		on J2EE server and other Servlet containers. 		
	</para>
	<example>
			<title>Reference "ajf-monitoring" in your Maven 2 project configuration file 'pom.xml'</title>
			<programlisting language="Xml" role="Xml"><![CDATA[
	<dependency>
		<groupId>am.ajf</groupId>
		<artifactId>ajf-monitoring</artifactId>
		<version>${ajf.version}</version>
	</dependency>
			]]></programlisting>
	</example>
	<figure id="monitoring.fig">
      	<title>Monitoring Principle</title>
	      <mediaobject>
	        <imageobject>
	          <imagedata align="center" fileref="images/monitoring.png"/>
	        </imageobject>
	      </mediaobject>
	</figure>
	<section>
		<title>Monitoring Class Diagram</title>
		<figure id="monitoring-classdiagram.fig">
      	  <title>Monitoring Class Diagram</title>
	      <mediaobject>
	        <imageobject>
	          <imagedata align="center" fileref="images/monitoring-classdiagram.png" scalefit="1" />
	        </imageobject>
	      </mediaobject>
	    </figure>
	</section>
	<section>
		<title>Get EventsDomain</title>
		<para>
			The <parameter>EventsDomain</parameter> is the entry point for sending events and declaring events handlers.
			You can get an <parameter>EventsDomain</parameter> instance by addressing the <parameter>EventManagerFactory</parameter>
		</para>
		<important>
			<para>
				The default EventsDomain is the AJF internal EventsDomain. 				
			</para> 
		</important>
		<example>
			<title>Get EventsDomain</title>
			<programlisting language="Java" role="Java"><![CDATA[
	// get default AJF EventsDomain
	EventsDomain ajfEventsDomain = EventsDomainManager.getEventsDomain();
	// get specific EventsDomain
	EventsDomain appEventsDomain = EventsDomainManager.getEventsDomain("myAppli");	
				]]></programlisting>
		</example>
	</section>
	<section>
		<title>Manage Events</title>
		<para>
			An <parameter>Event</parameter> is a simple POJO Object which extend the <parameter>AbstractEvent</parameter> Class.
			Your <parameter>Event</parameter> can declare injected attributes (with <parameter>@Inject</parameter>). In this case, you have to register your <parameter>Event</parameter>
			in the <parameter>EventFactory</parameter> and invoke <parameter>EventFactory.newEvent(...)</parameter> for the event instanciation.
		</para>
		<example>
			<title>Register/Instanciate Event</title>
			<programlisting language="Java" role="Java"><![CDATA[
	// register the event
	EventFactory.registerEvent("myAppEvent", MyEvent.class);
	// instanciate a new Event
	MyEvent event = EventFactory.newEvent("myAppEvent");	
				]]></programlisting>
		</example>
	</section>
	<section>
		<title>Sending Events</title>
		<para>
			For sending <parameter>Events</parameter> you only have to invoke the <parameter>sendEvent</parameter> method in the <parameter>EventManager</parameter>.
		</para>
	<example>
			<title>Sending Event</title>
			<programlisting language="Java" role="Java"><![CDATA[
	// instanciate a new Event
	MyEvent event = EventFactory.newEvent("myAppEvent");
	// set Event attributes
	// event.setXXX
	
	// get specific EventsDomain
	EventsDomain appEventsDomain = EventsDomainManager.getEventsDomain("myAppli");
	// send the event
	appEventsDomain.sendEvent("myAppEvent", event);	
				]]></programlisting>
		</example>
	</section>
	<section>
		<title>Managing Events Handlers</title>
		<para>
			<parameter>EventHandler</parameter> is responsible of the <parameter>Events</parameter> handling. It work with <parameter>EventFilter</parameter> in order to know if
			the <parameter>Event</parameter> can be handled, format the <parameter>Event</parameter> with a <parameter>EventFormatter</parameter> and handle the formatted <parameter>Event</parameter>
			with the <parameter>EventEmitter</parameter>. <parameter>EventHandlers</parameter> are managed (registered) with the <parameter>EventsDomain</parameter>.
		</para>
	<example>
			<title>Registering and Using Event Handler</title>
			<programlisting language="Java" role="Java"><![CDATA[
		// create the EventFilter
		EventFilter filter = null;
		// create the EventFormatter
		EventFormatter formatter = new XmlJAXBFormatter(
				MyEvent.class);
		// create the EventEmitter
		EventEmitter emitter = new ConsoleEmitter(System.out);
		
		// create the EventHandler
		EventHandler handler = new EventHandler(filter, formatter, emitter);
		
		// get specific EventsDomain
		EventsDomain appEventsDomain = EventsDomainManager.getEventsDomain("myAppli");
		// install the EventHandler as default
		appEventsDomain.setDefaultEventHandler(handler)
		// or install it for specifics Events types
		// appEventsDomain.installEventHandler(new String[] {"myAppEvent"}, handler);
		
		// instanciate a new Event
		MyEvent event = EventFactory.newEvent("myAppEvent");
		// set Event attributes
		// event.setXXX
		
		// send the event
		appEventsDomain.sendEvent("myAppEvent", event);	
				]]></programlisting>
		</example>
	</section>
	<section>
		<title>Available Events Formatters</title>
		<para>
		Events formatters are responsible of the <parameter>Events</parameter> content formatting. 
		</para>
		<section>
			<title>am.ajf.monitoring.impl.XmlJAXBFormatter</title>
			<para>
			Format <parameter>Events</parameter> as XML content.
			You have to invoke the constructor with the array of <parameter>Events</parameter> class you want to format.
			</para>
			<table frame="all">
   			  <title>API</title>
   			  <tgroup cols="2">
		        <colspec colname="c1"/>
		        <colspec colname="c2"/>
		        <tbody>
		        	<row>
		        		<entry>constructor(Class[])</entry>
		        		<entry>create formatter for a list of <parameter>Event</parameter> classes.</entry>
		        	</row>
		        </tbody>
		      </tgroup>
		    </table>
		    <example>
				<title>Usage</title>
				<programlisting language="Java" role="Java"><![CDATA[
	// fomatter for MyEvent class
	EventFormatter formatter = new XmlJAXBFormatter(MyEvent.class);				
				]]></programlisting>
			</example>
		</section>
	</section>
	<section>
		<title>Available Events Emitters</title>
		<para>
		Events emitters are responsible of sending serialized <parameter>Events.</parameter>
		</para>
		<section>
			<title>am.ajf.monitoring.impl.ConsoleEmitter</title>
			<para>
			Send the formatted <parameter>Events</parameter> in a specific <parameter>PrintStream</parameter>.
			</para>
			<table frame="all">
   			  <title>API</title>
   			  <tgroup cols="2">
		        <colspec colname="c1"/>
		        <colspec colname="c2"/>
		        <tbody>
		        	<row>
		        		<entry>constructor()</entry>
		        		<entry>create emitter on <parameter>System.out</parameter></entry>
		        	</row>
		        	<row>
		        		<entry>constructor(PrintStream)</entry>
		        		<entry>create emitter on a specific <parameter>PrintStream</parameter></entry>
		        	</row>
		        </tbody>
		      </tgroup>
		    </table>
		    <example>
				<title>Usage</title>
				<programlisting language="Java" role="Java"><![CDATA[
		// send formatted Events in a PrintSream
		EventEmitter emitter = new ConsoleEmitter();
		// or 
		// EventEmitter emitter = new ConsoleEmitter(System.out);
				]]></programlisting>
			</example>
		</section>
		<section>
			<title>am.ajf.monitoring.impl.LoggerAdapterEmitter</title>
			<para>
			Send the formatted <parameter>Events</parameter> in a specific <parameter>Logger</parameter>.
			</para>
			<table frame="all">
   			  <title>API</title>
   			  <tgroup cols="2">
		        <colspec colname="c1"/>
		        <colspec colname="c2"/>
		        <tbody>
		        	<row>
		        		<entry>constructor(Logger)</entry>
		        		<entry>create emitter on a specific <parameter>Logger</parameter>.</entry>
		        	</row>
		        </tbody>
		      </tgroup>
		    </table>
		    <example>
				<title>Usage</title>
				<programlisting language="Java" role="Java"><![CDATA[
		Logger myLogger = LoggerFactory.getLogger("myLoggingCategory");
		// send formatted Events in a specific logger
		EventEmitter emitter = new LoggerAdapterEmitter(myLogger);
				]]></programlisting>
			</example>
		</section>
		<section>
			<title>am.ajf.monitoring.impl.JMSEmitter</title>
			<para>
			Send the formatted <parameter>Events</parameter> in a specific JMS Queue or Topic.
			</para>
			<table frame="all">
   			  <title>API</title>
   			  <tgroup cols="2">
		        <colspec colname="c1"/>
		        <colspec colname="c2"/>
		        <tbody>
		        	<row>
		        		<entry>
		        		constructor(String connectionFactoryJndiName,
		        		String destinationJndiName)</entry>
		        		<entry>create emitter on a specific JMS Queue or Topic.</entry>
		        	</row>
		        </tbody>
		      </tgroup>
		    </table>
		    <example>
				<title>Usage</title>
				<programlisting language="Java" role="Java" ><![CDATA[
		// send formatted Events in a specific JMS Queue or Topic
		EventEmitter emitter = new JMSEmitter("jms/MyQueueConnectionFactory", 
			"jms/MyMonitoringQueue");
				]]></programlisting>
			</example>
		</section>
	</section>
</chapter>
