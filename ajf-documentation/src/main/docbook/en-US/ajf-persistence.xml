<?xml version='1.0' encoding='ISO-8859-1'?>
<!-- This document was created with Syntext Serna Free. -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
<chapter id="persistence">
	<title>AJF - Persistence Reference</title>
	<para>
		The AJF Persistence extension is built on JPA to provide support
		accessing
		the database based on the J2EE standard ORM solution. Based on JPA at hi
		core,
		the extension add java Annotations, Interfaces and CDI beans to reduce to
		a minimum
		the complexity of simple CRUD functionality.
	</para>
	<section>
		<title>Introduction</title>
		<para>
			The AJF persistence extension leverage two of the most important
			specifications
			in J2EE : CDI and JPA. With JPA you will be able to map your java
			objects to your
			database tables while JPA will manage your connections and database code to
			insert, update, and query single objects. For your advanced query
			needs, AJF
			delegate to the JPQL language in the form of Named Queries or even dynamic
			creation
			of JPQL queries. CDI is used by the extension to let you write code as
			you would
			a standard J2EE application while hooking into your code at deployment
			time to
			provides additional functionalities not provided by the J2EE specification.
		</para>
		<para>
			While the J2EE specification provides a lot of functionalities out of box,
			there
			is still work to be done and there is a number of needs more
			specific to
			Arcelor Mittal that can be added. This is where the CDI programming model is
			used.
		</para>
	</section>
	<section>
		<title>Summary of functionalities</title>
		<para>
			The functionalities of the module can be split in two parts. The one
			provided
			by JPA itself, and the one provided by the AJF Persistence module.
		</para>
		<note>
			<para>
				While the JPA functionalities are listed here for convenience, the
				list is far from complete and the official JPA documentation should be used
				for	additional informations, and &quot;how to&quot; usage.
				<ulink url="http://docs.oracle.com/javaee/5/tutorial/doc/bnbpy.html" />
			</para>
		</note>
		<itemizedlist>
			<listitem>
				<para>
					Connection management. JPA will manage the connections your different
					databases so you dont need explicit connection opening and closing.
				</para>
			</listitem>
			<listitem>
				<para>
					Object Relational Mapping (ORM) with Annotations. JPA provide a
					declarative way with annotations to map your java objects to your
					database tables.
				</para>
			</listitem>
			<listitem>
				<para>
					JPQL or SQL queries on objects. JPQL help you abstract your query needs
					from your actual database structure by providing a query language,
					SQL like,
					on your object model.
				</para>
			</listitem>
		</itemizedlist>
		<para>
			This is the list of functionalities specific to the Persistence
			extension.
		</para>
		<itemizedlist>
			<listitem>
				<para>
					Provide injection of an
					<code>EntityManager</code>
					and
					<code>EntityManagerFactory</code>
					with
					CDI (
					<literal>@Inject</literal>
					), to avoid to cumbersome creation of the EntityManagerFactory.
				</para>
			</listitem>
			<listitem>
				<para>
					Automatic implementation of method annotated with @NamedQuery by a method
					calling the corresponding JPA named
					query.
				</para>
			</listitem>
			<listitem>
				<para>
					Automatic implementation of methods of the interface CrudDbService when
					extended.
				</para>
			</listitem>
			<listitem>
				<para>
					Automatic implementation of the methods annotated @StoredProcedure by a
					method calling the corresponding stored procedure.
				</para>
			</listitem>
			<listitem>
				<para>
					Storage of audit datas on <code>Entity</code> that implement
					<code>Auditable</code>
				</para>
			</listitem>
		</itemizedlist>
	</section>
	<section>
		<title>Service with @NamedQuery</title>
		<para>On an AJF Service interface you can chose to annotate your
			method with the annotation @NamedQuery :</para>
		<example>
			<title />
			<programlisting language="Java" role="Java"><![CDATA[
public interface SampleServiceBD {

	@NamedQuery(name=Model1.FIND_BY_NAME)
	List<Model1> findAllModelsByName(@QueryParam("name") String name);

}
				]]></programlisting>
		</example>		
		<para>By annotating the method findAllModelsByName with the annotation
			@NamedQuery, you wont need to provide an implementation of the method
			in the NamedQueryNoImplService class. In fact if there is only
			annotated methods in the interface, the implementation is optionnal.
		</para>
		<para>You will need to provide the following informations :</para>
		<para>
			<variablelist>
				<varlistentry>
					<term>@QueryParam</term>
					<listitem>
						<para>For each parameter you need to define this annotation with
							the associated name of the parameter in the named query.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>@NamedQuery</term>
					<listitem>
						<para>
							The only parameter <parameter>name</parameter>
							is the name of the JPA named query as it appear in the
							corresponding entity (here Model1). To help refactoring, it is
							strongly suggested to use java constants as the named query name,
							as done in the example.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</para>
		<para>
			The returning type will need to be the same as defined in the SELECT
			part of your named query. It can be :
			<itemizedlist>
				<listitem>
					<para>A List of JPA Entities</para>
				</listitem>
				<listitem>
					<para>A JPA Entity</para>
				</listitem>
				<listitem>
					<para>Java Simple Type (int, long, String, ...)</para>
				</listitem>
			</itemizedlist>
		</para>
	</section>
	<section>
		<title>Service extend CrudServiceBD</title>
		<para>You can add basic CRUD functionnalities to your service by adding the
		following extends to your Service interface :</para>
		<example>
			<title></title>
			<programlisting language="Java" role="Java"><![CDATA[
public interface SimpleCrudServiceBD extends CrudServiceBD<ModelCrud, Long> {	
	//.... Your Additional Methods ...
}
   		]]></programlisting>
		</example>
		<para>
		By doing do, the following methods will be available without an implementation :
		</para>
		<example>
			<title/>
			<programlisting language="Java" role="Java"><![CDATA[
public interface CrudServiceBD<E,P> {
    
  	List<E> find(String queryName, Object... params); 
   	E save(E entity);
   	boolean remove(E entity);        
   	boolean delete(P pk);
   	E fetch(P pk);
       
}
   ]]></programlisting>
		</example>
		<para>Here is a decription of the available methods :</para>
		<para>
			<variablelist>
				<varlistentry>
					<term>find</term>
					<listitem>
						<para>
							Launch the Named Query specified as the first parameter on the
							Model object specified as the first Generic of the CudDbService interface.
							In our example it was Model1.
							The following parameters are the parameters of the named query (if needed)
							in order.							 
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>save</term>
					<listitem>
						<para>
							Store the specified Entity in the database. This method will 
							create a new object if it's new or an update if it's an existing object.														 
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>remove</term>
					<listitem>
						<para>
							Remove the specified Entity from the database. The entity object
							doesnt have to be attached (exist in the jpa session).							 
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>delete</term>
					<listitem>
						<para>
							Delete the Entity object specified by its primary key.																					 
						</para>
						<para>
							<emphasis>Not Yet Implemented</emphasis>
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>fetch</term>
					<listitem>
						<para>
							Retrieve an single Entity given its primary key.
						</para>
						<para>
							<emphasis>Not Yet Implemented</emphasis>							 
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</para>
	</section>
	<section>
		<title>Manual usage of JPA</title>
		<para>
			When you want to implement more complex behavior, you will need to use
			JPA directly inside your service. You know you cant use NamedQueries or
			the CrudServiceBD interface when :
		</para>
		<itemizedlist>
			<listitem>
				<para>Your JPQL query need to be build at run time</para>
			</listitem>
			<listitem>
				<para>You want to use the JPA Criteria API</para>
			</listitem>
			<listitem>
				<para>Your query is static but you need to bind your parameters at runtime</para>
			</listitem>
			<listitem>
				<para>
					You need to use advanced JPQL or (even a proprietary Query language 
					like HQL if you are using Hibernate) to do Batch updates or other 
					advanced features
				</para>
			</listitem>
		</itemizedlist>
		<warning>
			<para>
				Before you chose to do a dynamic JPQL query, be sure that you cant use
				another solution. NamedQueries are validated when the server start, but
				you cant know if your dynamic JPQL query is correct until you launch it. 
			</para>
		</warning>
		<para>
			You can use JPA directly like in the following example	
		</para>
		<example>
			<title>Manual Service Implementation</title>
			<programlisting language="Java" role="Java"><![CDATA[
public class ManualService implements ManualServiceBD {

	@Inject
	private EntityManagerFactory emf;
	
	public List<Model1> findByNameOrderBy(String name, String order) {
		EntityManager em = emf.createEntityManager();
		StringBuffer sb = new StringBuffer();
		sb.append("SELECT m FROM Model1 m WHERE m.name = :name");
		if (order != null) {
			sb.append(" ORDER BY ");
			sb.append(order);
		}
		
		Query query = em.createQuery(sb.toString());
		query.setParameter("name", name);
		
		return query.getResultList();
	}	
}
				]]></programlisting>
		</example>		
		<para>
			In this example the most important part is <emphasis>@Inject EntityManagerFactory</emphasis>.
			This will inject the EntityManagerFactory managed by AJF. After this step, inside your
			service method you can get an instance of an EntityManager with <parameter>createEntityManager()</parameter>
			and use the full JPA API with it.
		</para>
		<important>
			In a classic J2EE application, you inject the EntityManagerFactory with
			@PersistenceUnit. If you do that you wont use the AJF managed EntityManagerFactory
			and might have unexpected behaviors.
		</important>
		<para>
			Injecting the EntityManagerFactory without other configuration will inject
			the only <parameter>persistence-unit</parameter> defined in your <emphasis>persistence.xml</emphasis>
			or the one named <emphasis>"default"</emphasis> if you have more than one.
		</para>
		<para>
			You can specify which persistence-unit to use by adding the <parameter>@PersistenceUnit</parameter>
			on your class. This also mean you cant mix methods targeted on differents
			persistence-units inside the same service. 
		</para>
		<example>
			<title>Manual Service Implementation With PersistenceUnit</title>
			<programlisting language="Java" role="Java"><![CDATA[
@PersistenceUnit("pu-logs-database")
public class ManualService implements ManualServiceBD {

	@Inject
	private EntityManagerFactory emf;
	
	public List<Model1> findByNameOrderBy(String name, String order) {
		EntityManager em = emf.createEntityManager();
		StringBuffer sb = new StringBuffer();
		sb.append("SELECT m FROM Model1 m WHERE m.name = :name");
		if (order != null) {
			sb.append(" ORDER BY ");
			sb.append(order);
		}
		
		Query query = em.createQuery(sb.toString());
		query.setParameter("name", name);
		
		return query.getResultList();
	}	
}
				]]></programlisting>
		</example>						
	</section>
	<section>
		<title>Managing Audit Datas</title>
		<para>
			JPA comes with a number of tools that can be used to manage Audit Datas.
			AJF cant help more than providing the necessary components for know scenarios
			used by our teams to store audit datas. If you cant use one of the built-in
			component you can still use directly JPA to store the Audit Datas yourself. 
		</para>
		<section>
			<title>Using the standard Audit Data component</title>
			<para>
				The standard implementation come with the following 3 components :
			</para>
			<itemizedlist>
				<listitem>
					<para>
						<classname>am.ajf.persistence.jpa.audit.standard.StdAuditable</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<classname>am.ajf.persistence.jpa.audit.standard.StdAuditDataComponent</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<classname>am.ajf.persistence.jpa.audit.standard.StdAuditDataListener</classname>
					</para>
				</listitem>
			</itemizedlist>
			<para>
				To enable the standard Audting mechanism on your JPA <classname>Entity</classname>
				You need to add the following annotations and methods :
			</para>
			<programlistingco role="Java">
		        <areaspec>
		          <area coords="7" id="audit-1" />		
		          <area coords="8" id="audit-2" />		
		          <area coords="15" id="audit-3" />
		          <area coords="42" id="audit-4" />
		        </areaspec>
				<programlisting language="Java" role="Java"><![CDATA[
@Entity
	@NamedQueries({ @NamedQuery(name = ModelAudit.FIND_BY_NAME, 
		query = "FROM ModelAudit model WHERE model.name = ?1") ,
	@NamedQuery(name = ModelAudit.FIND_ALL, 
		query = "FROM ModelAudit model")})	
@EntityListeners(StdAuditDataListener.class)
public class ModelAudit implements StdAuditable {

	public static final String FIND_ALL = "ModelAudit.findAll";
	public static final String FIND_BY_NAME = "ModelAudit.findByName";
	
	private Long id;
	private String name;
	private StdAuditDataComponent auditDatas;

	public ModelAudit() {}
	
	public ModelAudit(String name) {
		this.name = name;
	}	
	
	@Id @GeneratedValue
	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@Basic
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Override
	public EvolAuditDataComponent getAuditData() {
		return auditDatas;
	}

	@Override
	public void setAuditData(EvolAuditDataComponent auditData) {
		this.auditDatas = auditData;		
	}
	
}			
				]]></programlisting>
			<calloutlist>	         
	          <callout arearefs="audit-1">
	            <para>
	            	<literal>@EntityListeners(StdAuditDataListener.class)</literal> : With the listener of your
	            	choice from the package <package>am.ajf.persistence.jpa.audit</package>.
	            	This is component responsible for launching the associated hooks when
	            	you save/update your JPA element.
	            </para>
	          </callout>
	          <callout arearefs="audit-2">
	            <para>
	            	<literal>implements StdAuditable</literal> : the interface that will
	            	give you access to the audit component from the Listener.
	            </para>
	          </callout>
	          <callout arearefs="audit-3">
	            <para>
	            	<literal>private StdAuditDataComponent auditDatas;</literal> : the fields
	            	declaration as an embedded object of all your audit datas. See the content of 
	            	the class <classname>StdAuditDataComponent</classname> for the content details.
				</para>
	          </callout>
	          <callout arearefs="audit-4">
	            <para>
	            	<literal>getter/setter</literal> : the getters and setters for the
	            	declared Audit Data component.
	            </para>
	          </callout>
	       </calloutlist>
	     </programlistingco>
		 <para>
			The content of the class <classname>StdAuditDataComponent</classname> is :	
		 </para>
		 <programlisting language="Java" role="Java"><![CDATA[
@Embeddable
public class StdAuditDataComponent implements Serializable {

	private static final long serialVersionUID = 1L;
	
	@Column(nullable = false, name="CREATE_DATE")
	@Temporal(TemporalType.TIMESTAMP)
	private Date createDate;
	
	@Column(nullable = false, length = 25, name="CREATE_USER")
	private String createUser;
	
	@Column(nullable = true, name="UPDATE_DATE")
	@Temporal(TemporalType.TIMESTAMP)
	private Date updateDate;
	
	@Column(nullable = true, length = 25, name="UPDATE_USER")
	private String updateUser;
	
	//... getters and setters ...
}		 
		 ]]></programlisting>
		</section>
		<section>
			<title>Implementing you own AuditDatas</title>
			<para>
				If the structure of your audit datas doesnt match one of the existing
				AJF AuditDataComponent, you will need to implement the 3 classes your self.
			</para>
			<variablelist>
				<varlistentry>
					<term><classname>XXXAuditable</classname></term>
					<listitem>
						<para>
							This class is the interface with the getter and setter to
							access the XXXAuditDataComponent
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><classname>XXXAuditDataComponent</classname></term>
					<listitem>
						<para>
							This class is the main class that represent the audit datas.
							It is an <parameter>@Embeddable</parameter> JPA class where
							you declare all the mappings between your object and the 
							columns database.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><classname>XXXAuditDataListener</classname></term>
					<listitem>
						<para>
							This class is the processor that will save the audit datas
							when the object is saved or updated by JPA. This is where
							you will write custom code to access AuditDatas from the 
							ajf-core and ajf-injection module and store them in your custom
							component. 
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<para>
				A good start to write your own AuditDataListener will be to use the
				<classname>StdAuditDataListner</classname> as a starting point.
				The update on the AuditDataComponent is done inside JPA hooks methods
				<methodname>@PrePersist</methodname> and <methodname>@PreUpdate</methodname>  
			</para>
					 <programlisting language="Java" role="Java"><![CDATA[
@PrePersist
public void setAuditData(Object bean) {
	processAuditData(bean);
}

@PreUpdate
public void updateAuditData(Object bean) {
	processAuditData(bean);		
}

/**
 * process the entity audit data
 * @param bean
 */
private void processAuditData(Object bean) {
	
	if (bean instanceof StdAuditable) {
		
		AuditData audit = AuditDataContext.getAuditData();
		String user = null;
		if (null != audit) {
			user = String.valueOf(audit.get(AuditData.KEY_USERID));				
		}
		if (null == user)
			 user = "Anonymous";
		
		StdAuditable auditableBean = (StdAuditable) bean;
		StdAuditDataComponent auditData = auditableBean.getAuditData();
		
		if (null == auditData) {
			// instanciate and attach the AuditData
			auditData = new StdAuditDataComponent();
			auditableBean.setAuditData(auditData);
			// initialize the AuditData
			auditData.setCreateDate(new Date());
			auditData.setCreateUser(user);
			auditData.setUpdateDate(null);
			auditData.setUpdateUser(null);
		}
		else {
			auditData.setUpdateDate(new Date());
			auditData.setUpdateUser(user);
		}
	}
}		 
		 ]]></programlisting>
		 <para>
		 	There is an implementation for Auditing inside AJF for the following case : 
		 </para>
		 <variablelist>
			<varlistentry>
				<term><classname>StdAuditable</classname></term>
				<listitem>
					<para>
						Use this set of components if you are free of DBA constraints
						on your database and you just want to enable auditing for your beans. 
					</para>
				</listitem>
			 </varlistentry>
			 <varlistentry>
				<term><classname>EvolAuditable</classname></term>
				<listitem>
					<para>
						Use this set of components if you are on Florange Mainframe DB2. 
					</para>
				</listitem>
			 </varlistentry>
			 <varlistentry>
				<term><classname>YourAuditable !</classname></term>
				<listitem>
					<para>
						If the AuditData you use are common for a number of project. Send
						us your code and we will add them to the framework. This will ensure
						all the projects in your area use the same audit data structure. 
					</para>
				</listitem>
			 </varlistentry>
		  </variablelist>		  
		</section>
	</section>
</chapter>
