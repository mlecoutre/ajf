<?xml version='1.0' encoding='ISO-8859-1'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
<chapter id="injection">
	<title>AJF - Injection Reference</title>
	<para>
		The AJF Core library provide a set of commons reusable components for use
		on J2EE server and other Servlet containers. 		
	</para>
	<example>
			<title>Reference "ajf-injection" in your Maven 2 project configuration file 'pom.xml'</title>
			<programlisting language="Xml" role="Xml"><![CDATA[
	<dependency>
		<groupId>am.ajf</groupId>
		<artifactId>ajf-injection</artifactId>
		<version>${ajf.version}</version>
	</dependency>
			]]></programlisting>
	</example>
	<section id="injection-introductionSection">
		<title>Introduction</title>
		<para>
			Contexts and Dependency Injection for the Java EE Platform (CDI), JSR 299 is a technology that supplies a powerful set 
			of services to Java EE components. These services allow Java EE components, including EJB session beans and 
			JavaServer Faces (JSF) managed beans, to be bound to lifecycle contexts, to be injected, and to interact in a loosely coupled
			way by firing and observing events. Perhaps most significantly, CDI unifies and simplifies the EJB and JSF programming models.
		</para>
		<para>
			AJF injection provide a set of injectors (as CDI Producers) and behaviors (as CDI Interceptors).
		</para>
	</section>
	<section id="injection-injectableComponentsSection">
		<title>Injectable components</title>
		<para>
			Some AJF components are directly injectables in Managed Beans.
			It's the case for applicative Business Policies and Technical Services injection, with the following rules :
			<itemizedlist>
				<listitem>
					<para>
				[appBasePackageName].core.business.*Policy implementations classes which implements
				[appBasePackageName].lib.business.*BD interfaces
					</para>
				</listitem>
				<listitem>
					<para>
				[appBasePackageName].core.services.*Service implementations classes which implements
				[appBasePackageName].lib.services.*ServiceBD interfaces
					</para>
				</listitem>
			</itemizedlist>
			In reality, each interface which have only one implementation is injectable (without CDI decoration - Qualifiers annotations for exemple -)
			if the library contain a beans configuration file (META-INF/beans.xml)
			<example>
				<title>Empty 'beans.xml' file</title>
				<programlisting>
				<![CDATA[
				<beans>
				</beans>
				]]>
				</programlisting>
			</example>
		</para>
		<section>
			<title>Inject Logger</title>
			<para></para>
			<programlisting language="Java" role="Java"><![CDATA[
	import javax.inject.Inject;
	
	import org.slf4j.Logger;
	...
	
	@Inject
	Logger myLogger;
			]]></programlisting>
		</section>
		<section>
			<title>Inject AuditData</title>
			<para><classname>AuditData</classname> injection.</para>
			<programlisting language="Java" role="Java"><![CDATA[
	import javax.inject.Inject;
	
	import am.ajf.core.datas.AuditData;
	...
	
	@Inject
	AuditData auditData;
			]]></programlisting>
		</section>
		<section>
			<title>Inject Configuration</title>
			<para>ApplicationContect configuration.</para>
			<programlisting language="Java" role="Java"><![CDATA[
	import javax.inject.Inject;
	
	import org.apache.commons.configuration.Configuration;
	...
	
	@Inject
	Configuration myConfig;
			]]></programlisting>
		</section>
		<section>
			<title>Inject Property</title>
			<para>ApplicationContect configured property (defined in the 'settings.properties' file).</para>
			<programlisting language="Java" role="Java"><![CDATA[
	import javax.inject.Inject;
	
	import am.ajf.injection.annotation.Property;
	...
	
	@Inject @Property("mySettingProperty")
	String myProp1;
	
	@Inject 
	@Property(value="mySettingProperty", defaultValue="aDefaultValue")
	private String myProp2;
			]]></programlisting>
		</section>
		<section>
			<title>Inject MailSender</title>
			<para>
			The <classname>MailSender</classname> which is injected if configured with the following rule :
			<itemizedlist>
				<listitem>
					<para>
					the bean attribute 'jndiName' is equal to "mail/Session" 
					if the application configuration "mailSender.jndiName" is not setted in the file "settings.properties"
					</para> 
				</listitem>
				<listitem>
					<para>
					the bean attribute 'smtpServer' is equal to "applicatifs.appliarmony.net" 
					</para>				
				</listitem>
			</itemizedlist>
			</para>
			<programlisting language="Java" role="Java"><![CDATA[
	import javax.inject.Inject;
	
	import am.ajf.core.mail.MailSender;
	...
	
	@Inject
	MailSender myMailSender;
			]]></programlisting>
		</section>
		<section>
			<title>Inject Cache</title>
			<para></para>
			<table frame="all">
				<title><classname>am.ajf.injection.annotation.Cache</classname> API</title>
				<tgroup cols="4">
					<colspec colname="c1"/>
					<colspec colname="c2"/>
					<colspec colname="c3"/>
					<colspec colname="c4"/>
					<thead>
						<row>
							<entry colname="1">Attribute</entry>
							<entry colname="2">Type</entry>
							<entry colname="3">Default Value</entry>
						    <entry colname="4">Description</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>cacheManagerName</entry>
							<entry>java.lang.String</entry>
							<entry><parameter>simple</parameter> <classname>am.ajf.core.cache.CacheManager</classname>.</entry>
							<entry>the named <classname>am.ajf.core.cache.CacheManager</classname> instance to use.</entry>
						</row>
						<row>
							<entry>cacheName</entry>
							<entry>java.lang.String</entry>
							<entry><parameter>[methodDeclaredClassName]</parameter>#<parameter>[methodName]</parameter></entry>
							<entry>the named <classname>am.ajf.core.cache.Cache</classname> instance to use.</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
			<programlisting language="Java" role="Java"><![CDATA[
	import javax.inject.Inject;
	...
	
	@Inject 
	private Cache defaultCache;
	
	@Inject 
	@am.ajf.injection.annotation.Cache(cacheManagerName="simple")
	private Cache defaultCacheFromACacheManager;
	
	@Inject 
	@am.ajf.injection.annotation.Cache(cacheName="default")
	private Cache aCacheFromDefaultCacheManager
	
	@Inject 
	@am.ajf.injection.annotation.Cache(cacheManagerName="guava", 
		cacheName="aCustomCache")
	private Cache aCacheFromACacheManager;	
			]]></programlisting>
		</section>
	</section>
	<section id="injection-interceptorsSection">
		<title>Interceptors</title>
		<para>
			Interceptors are AOP - Aspect Oriented Programming - like components.
			This kind of components allow to intercept methods invocations, 
			you can DO something Before and After the target method invocation. AJF provide a set interceptors.   
			In order to activate the interceptors, you have to declare them in the beans configuration file. 
			Be careful, the declaration order is the execution order when the interceptors are cumulated.
			<programlisting>
			<![CDATA[
	<beans>
		 <interceptors>
			  <class>am.ajf.injection.MonitoringInterceptor</class>
			  <class>am.ajf.injection.CacheInterceptor</class>
		 </interceptors>
	</beans>
			]]></programlisting>
			The interceptors are attached to specific annotations they observe.
			For the interceptor to be triggered, the observed annotation have to be positioned before the concerned method.
		</para>
		<section>
			<title>Monitoring Interceptor</title>
			<para>
			This interceptor instrument the concerned method invocation by computing the targetted method execution time 
			and firing specifics AJF monitoring events. The trigerred annotation is <classname>am.ajf.injection.annotation.@Monitored</classname>.
			<programlisting language="Java" role="Java"><![CDATA[
				
			@Monitored
			public String myFirstOperation(String string1, String string2) {
				String res = String.format("Process: Hello %s, %s.", string1 , string2);
				logger.debug(res);
				return res;
			}
				
			]]></programlisting>			
			</para>			
		</section>
		<section>
			<title>Cache Interceptor</title>
			<para>
			This interceptor add cache  capacities on the targetted method. 
			The trigerred annotation is <classname>am.ajf.injection.annotation.@Cached</classname>.
			The annotation <classname>@Cached</classname> has optional parameters.
			<table frame="all">
				<title>@Cached annotation API</title>
				<tgroup cols="4">
					<colspec colname="c1"/>
					<colspec colname="c2"/>
					<colspec colname="c3"/>
					<colspec colname="c4"/>
					<thead>
						<row>
							<entry colname="1">Attribute</entry>
							<entry colname="2">Type</entry>
							<entry colname="3">Default Value</entry>
						    <entry colname="4">Description</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>cacheManagerName</entry>
							<entry>java.lang.String</entry>
							<entry><parameter>simple</parameter> <classname>am.ajf.core.cache.CacheManager</classname>.</entry>
							<entry>the named <classname>am.ajf.core.cache.CacheManager</classname> instance to use.</entry>
						</row>
						<row>
							<entry>cacheName</entry>
							<entry>java.lang.String</entry>
							<entry><parameter>[methodDeclaredClassName]</parameter>#<parameter>[methodName]</parameter></entry>
							<entry>the named <classname>am.ajf.core.cache.Cache</classname> instance to use.</entry>
						</row>
						<row>
							<entry>cacheBuilder</entry>
							<entry><![CDATA[Class<? extends am.ajf.injection.api.CacheBuilder>]]></entry>
							<entry><classname>am.ajf.injection.impl.DefaultCacheBuilder.class</classname></entry>
							<entry>allow to use a custom <classname>am.ajf.core.cache.Cache</classname> provider class.</entry>
						</row>
						<row>
							<entry>keyBuilder</entry>
							<entry><![CDATA[Class<? extends KeyBuilder>]]></entry>
							<entry><classname>am.ajf.injection.impl.SimpleKeyBuilderImpl.class</classname></entry>
							<entry>allow to use a custom <parameter>key</parameter> builder class.</entry>
						</row>
						<row>
							<entry>defaultKey</entry>
							<entry>String</entry>
							<entry><parameter>[methodDeclaredClassName]</parameter>#<parameter>[methodName]</parameter></entry>
							<entry>is used if the generated key is <parameter>null</parameter> or <parameter>empty</parameter>.</entry>
						</row>
						<row>
							<entry>clearCache</entry>
							<entry>boolean</entry>
							<entry>true</entry>
							<entry>specify to clear or not the used cache at the fist method - of instance - call.</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
			<programlisting language="Java" role="Java"><![CDATA[
				
			@Cached(cacheManagerName="infinispan", cacheName="myCache", clearCache=true);
			public String myFirstOperation(String string1, String string2) {
				String res = String.format("Process: Hello %s, %s.", string1 , string2);
				logger.debug(res);
				return res;
			}
				
			]]></programlisting>			
			</para>
			<section>
				<title>CacheBuilder</title>
				<para>
						
				</para>
				<table frame="all">
					<title><classname>am.ajf.injection.api.CacheBuilder</classname> API</title>
					<tgroup cols="2">
						<colspec colname="c1"/>
						<colspec colname="c2"/>
						<thead>
							<row>
								<entry colname="1">Method</entry>
							    <entry colname="2">Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry><![CDATA[
								am.ajf.core.cache.Cache build(Class<?> targetClass, 
									Method targetMethod, 
									am.ajf.injection.annotation.Cached cacheAnnotation)
								]]></entry>
								<entry>method return a <classname>am.ajf.core.cache.Cache</classname> instance</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
			</section>
			<section>
				<title>KeyBuilder</title>
				<para>
						
				</para>
				<table frame="all">
					<title><classname>am.ajf.injection.api.KeyBuilder</classname> API</title>
					<tgroup cols="2">
						<colspec colname="c1"/>
						<colspec colname="c2"/>
						<thead>
							<row>
								<entry colname="1">Method</entry>
							    <entry colname="2">Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry><![CDATA[
								Object build(Class<?> targetClass, Method targetMethod,
									am.ajf.injection.annotation.Cached cachedAnnotation,
									Object[] parameters);
								]]></entry>
								<entry>method return a <classname>java.lang.Object</classname> instance for the key value (in general, the generated 
									<parameter>key</parameter> is a <classname>java.lang.String</classname></entry>
							</row>
						</tbody>
					</tgroup>
				</table>
			</section>
		</section>
	</section>
	<!--  
	<section>
		<title></title>
		<para>
			
		</para>
		<important>
			<para>
			 				
			</para> 
			<para><emphasis></emphasis></para>
			<programlisting language="Xml" role="Xml"><![CDATA[

			]]></programlisting>
		</important>

		<example>
			<title></title>
			<programlisting language="Java" role="Java"><![CDATA[

				]]></programlisting>
			<para><emphasis>or</emphasis></para>
			<programlisting language="Java" role="Java"><![CDATA[

			]]></programlisting>				
		</example>
			
		<important>
			<para>
				
			</para>
			<itemizedlist>
				<listitem>
					<para>
						<emphasis>dlsm:ldmlsmdl</emphasis>
					</para>
				</listitem>
			</itemizedlist> 
		</important>
		<warning>
			<para>
				
			</para>
		</warning>	
		
	</section>
	-->
</chapter>
