<?xml version='1.0' encoding='ISO-8859-1'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
<chapter id="injection">
	<title>AJF - Injection Reference</title>
	<para>
		The AJF Core library provide a set of commons reusable components for use
		on J2EE server and other Servlet containers. 		
	</para>
	<example>
			<title>Reference "ajf-injection" in your Maven 2 project configuration file 'pom.xml'</title>
			<programlisting language="Xml" role="Xml"><![CDATA[
	<dependency>
		<groupId>am.ajf</groupId>
		<artifactId>ajf-injection</artifactId>
		<version>${ajf.version}</version>
	</dependency>
			]]></programlisting>
	</example>
	<section id="injection-introductionSection">
		<title>Introduction</title>
		<para>
			Contexts and Dependency Injection for the Java EE Platform (CDI), JSR 299 is a technology that supplies a powerful set 
			of services to Java EE components. These services allow Java EE components, including EJB session beans and 
			JavaServer Faces (JSF) managed beans, to be bound to lifecycle contexts, to be injected, and to interact in a loosely coupled
			way by firing and observing events. Perhaps most significantly, CDI unifies and simplifies the EJB and JSF programming models.
		</para>
		<para>
			AJF injection provide a set of injectors (as CDI Producers) and behaviors (as CDI Interceptors).
		</para>
	</section>
	<section id="injection-injectableComponentsSection">
		<title>Injectable components</title>
		<para>
			Some AJF components are directly injectables in Managed Beans.
			It's the case for applicative Business Policies and Technical Services injection, with the following rules :
			<itemizedlist>
				<listitem>
					<para>
				[appBasePackageName].core.business.*Policy implementations classes which implements
				[appBasePackageName].lib.business.*BD interfaces
					</para>
				</listitem>
				<listitem>
					<para>
				[appBasePackageName].core.services.*Service implementations classes which implements
				[appBasePackageName].lib.services.*ServiceBD interfaces
					</para>
				</listitem>
			</itemizedlist>
			In reality, each interface which have only one implementation is injectable (without CDI decoration - Qualifiers annotations for exemple -)
			if the library contain a beans configuration file (META-INF/beans.xml)
			<example>
				<title>Empty 'beans.xml' file</title>
				<programlisting language="Xml" role="Xml"><![CDATA[
	<beans
	   xmlns="http://java.sun.com/xml/ns/javaee"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="
	   	http://java.sun.com/xml/ns/javaee
	   	http://java.sun.com/xml/ns/javaee/beans_1_0.xsd">
	</beans>
				]]></programlisting>
			</example>
		</para>
		<section>
			<title>Inject Logger</title>
			<para></para>
			<programlisting language="Java" role="Java"><![CDATA[
	import javax.inject.Inject;
	
	import org.slf4j.Logger;
	...
	
	@Inject
	Logger myLogger;
			]]></programlisting>
		</section>
		<section>
			<title>Inject AuditData</title>
			<para></para>
			<programlisting language="Java" role="Java"><![CDATA[
	import javax.inject.Inject;
	
	import am.ajf.core.datas.AuditData;
	...
	
	@Inject
	AuditData auditData;
			]]></programlisting>
		</section>
		<section>
			<title>Inject Configuration</title>
			<para></para>
			<programlisting language="Java" role="Java"><![CDATA[
	import javax.inject.Inject;
	
	import org.apache.commons.configuration.Configuration;
	...
	
	@Inject
	Configuration myConfig;
			]]></programlisting>
		</section>
		<section>
			<title>Inject Property</title>
			<para></para>
			<programlisting language="Java" role="Java"><![CDATA[
	import javax.inject.Inject;
	
	import am.ajf.injection.annotation.Property;
	...
	
	@Inject @Property("mySettingProperty")
	String myProp1;
	
	@Inject 
	@Property(value="mySettingProperty", defaultValue="aDefaultValue")
	private String myProp2;
			]]></programlisting>
		</section>
		<section>
			<title>Inject MailSender</title>
			<para>
			The <classname>MailSender</classname> which is injected if configured with the following rule :
			<itemizedlist>
				<listitem>
					<para>
					the bean attribute 'jndiName' is equal to "mail/Session" 
					if the application configuration "mailSender.jndiName" is not setted in the file "settings.properties"
					</para> 
				</listitem>
				<listitem>
					<para>
					the bean attribute 'smtpServer' is equal to "applicatifs.appliarmony.net" 
					</para>				
				</listitem>
			</itemizedlist>
			</para>
			<programlisting language="Java" role="Java"><![CDATA[
	import javax.inject.Inject;
	
	import am.ajf.core.mail.MailSender;
	...
	
	@Inject
	MailSender myMailSender;
			]]></programlisting>
		</section>
		<section>
			<title>Inject JTA UserTransaction</title>
			<para>Can only work if the code is invoked in a container which include the service JTA</para>
			<programlisting language="Java" role="Java"><![CDATA[
	import javax.inject.Inject;
	
	import javax.transaction.UserTransaction;
	...
	
	@Inject
	UserTransaction myUserTx;
			]]></programlisting>
		</section>
		<section>
			<title>Inject Cache</title>
			<para></para>
			<programlisting language="Java" role="Java"><![CDATA[
	import javax.inject.Inject;
	...
	
	@Inject 
	private Cache defaultCache;
	
	@Inject 
	@am.ajf.injection.annotation.Cache(cacheManagerName="simple")
	private Cache defaultCacheFromACacheManager;
	
	@Inject 
	@am.ajf.injection.annotation.Cache(cacheName="default")
	private Cache aCacheFromDefaultCacheManager
	
	@Inject 
	@am.ajf.injection.annotation.Cache(cacheManagerName="guava", 
		cacheName="aCustomCache")
	private Cache aCacheFromACacheManager;	
			]]></programlisting>
		</section>
	</section>
	<section id="injection-interceptorsSection">
		<title>Interceptors</title>
		<para>
			Interceptors are AOP - Aspect Oriented Programming - like components.
			This kind of components allow to intercept methods invocations, 
			you can DO something Before and After the target method invocation. AJF provide a set interceptors.   
			In order to activate the interceptors, you have to declare them in the beans configuration file. 
			Be careful, the declaration order is the execution order when the interceptors are cumulated.
			<programlisting language="Xml" role="Xml"><![CDATA[
	<beans
	   xmlns="http://java.sun.com/xml/ns/javaee"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="
	   	http://java.sun.com/xml/ns/javaee
	   	http://java.sun.com/xml/ns/javaee/beans_1_0.xsd">
		 <interceptors>
			  <class>am.ajf.injection.MonitoringInterceptor</class>
			  <class>am.ajf.injection.TransactionInterceptor</class>
			  <class>am.ajf.injection.CacheInterceptor</class>
			  <!-- should be the last one -->
			  <class>am.ajf.injection.ErrorHandlingInterceptor</class>
		 </interceptors>
	</beans>
			]]></programlisting>
			The interceptors are attached to specific annotations they observe.
			For the interceptor to be triggered, the observed annotation have to be positioned before the concerned method.
		</para>
		<section>
			<title>Monitoring Interceptor</title>
			<para>
			This interceptor instrument the concerned method invocation by computing the target method execution time 
			and firing AJF monitoring events.
			
			</para>			
		</section>
		<section>
			<title>Transactional Interceptor</title>
			<para>
			
			</para>
		</section>
		<section>
			<title>Cache Interceptor</title>
			<para>
			</para>
		</section>
		<section>
			<title>ErrorHandling Interceptor</title>
			<para>
			</para>
		</section>
	</section>
	<!--  
	<section>
		<title></title>
		<para>
			
		</para>
		<important>
			<para>
			 				
			</para> 
			<para><emphasis></emphasis></para>
			<programlisting language="Xml" role="Xml"><![CDATA[

			]]></programlisting>
		</important>

		<example>
			<title></title>
			<programlisting language="Java" role="Java"><![CDATA[

				]]></programlisting>
			<para><emphasis>or</emphasis></para>
			<programlisting language="Java" role="Java"><![CDATA[

			]]></programlisting>				
		</example>
			
		<important>
			<para>
				
			</para>
			<itemizedlist>
				<listitem>
					<para>
						<emphasis>dlsm:ldmlsmdl</emphasis>
					</para>
				</listitem>
			</itemizedlist> 
		</important>
		<warning>
			<para>
				
			</para>
		</warning>	
		
	</section>
	-->
</chapter>
